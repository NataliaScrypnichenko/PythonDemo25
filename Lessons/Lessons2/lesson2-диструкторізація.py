# деструктурізації=ми вже зустрічали її коли ми проганяли через цикл дикшеаруюписали
# кортеджі і робивали їх.кортежі можна писати без () але краще писати
tuple1=(1,2)
a,b = tuple1 # хочу щоб числа були в різних зміних
print(a,b)
# записуємо зараз цифрами і це буде кортеж
a=7
b=5
a,b = b,a
print(a,b)
# може буди і список
l=[2,4,1,7,4,7]
# задати ці елементи в конкретну зміну(можемо кожному присвоїти зміну) але робимо для всіх
# (_)-андискор,зміні які нам не потрібно,і які ми не використовуємо,якраз позичаємо андискором-а
# це тойсамий *arg

# потрібно тільки два елемента
a,b,*_ = l
print(a)#2
print(b) #4
print(_) #[1,7,4,7]
# не потрібно 1,2b, всерівно * забрати останній елемент
_,b,*_,y,z = l
print(b,y,z)
# потрібно тільки перед остані
*_,w,y,z = l
print(w,y,z)
##################################################################################################
# що робити якщо є масив=список
args=[2,3,4]
# ф-я яка приймає значення якісь і буде їх друкувати просто
def func(arg1,arg2,arg3):
    print(arg1,arg2,arg3)
# розпаковка
# func(*args)# щоб не робити через індекси то можемо показати через ф-ю так
#func(1,2,3) # передати цифри
# розпаковка списків і словників
dict_args ={
    'arg1': 8,
    'arg2': 9,
    'arg3': 10
}
def func(arg1,arg2,arg3):
    print(arg1,arg2,arg3)

func(*dict_args) # передає ключі arg1,arg2,arg3 # зщ
func(**dict_args) # щоб отримати значення