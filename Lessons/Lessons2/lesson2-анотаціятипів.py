# # –∞–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤- –ø—ñ–¥—Å–∫–∞–∑–∫–∏ =—Ç–∏–ø—ñ–∑–∞—Ü—ñ—è
# # —â–æ–± —É —Ñ—É–Ω–∫—Ü—ñ—ó—ó –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ç–∏–ø (—Å—Ç—Ä—ñ–Ω–≥–∞)
# def func(name:str):
#     name.startswith('') # –Ω–∞ —è–∫—É –±—É–∫–≤—É –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è,–º–æ–∂–µ–º–æ –≤—Å—Ç–∞–≤–ª—è—Ç–∏ –∑–º—ñ–Ω—ñ –≤—Å—ñ —è–∫—ñ –º–æ–∂–µ–º–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ —ñ–Ω—à—É(int,  bool,float,str)
#     print(name)
# # —è–∫—â–æ –º–∞—Å–∏–≤
# list=[{'name': 'Max', 'age': 1}, {'name': 'Nata', 'age': 35}, {'name': 'kamila', 'age': 2}, {'name': 'karina', 'age': 20}]
# # —Ç–∏–ø—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–∏—Ö
# def func1(names:list[str]):
#     names.sort()# –º–µ—Ç–æ–¥–∏ —Å–ø–∏—Å–∫—É
#     names[0].upper()# –º–µ—Ç–æ–¥ —Å—Ç—Ä—ñ–Ω–≥–∏
#
# # –¥–ª—è —Ñ-—ó
# def func2(names:list[str])->dict:# –ø–∏—à–∏–º–æ —Ç–∏–ø –∫–ª—é—á–∞ —ñ –∑–Ω–∞—á–µ–Ω–Ω—è
#     name = '888'
#     return {'name':name}

##########################################################################
# –±—ñ–ª—ñ–æ—Ç–µ–∫–∏ –ø–∞–π—Ç–æ–Ω–∞
# import typing #=–∑–∞–±–∏—Ä–∞—Ç–∏ —Ç–∏–ø–∏
# a:typing.Any       # —Ü–µ –≤—Å–µ
from typing import Any, TypedDict,Callable# –∫—Ä–∞—â–µ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç —ñ –º–æ–∂–µ–º–æ –ø–∏—Å–∞—Ç–∏ —Å–≤–æ—ó —Ç–∏–ø–∏
a:Any='ghlol'
d: int= 1111 #–º–æ–∂–µ–º–æ —è–∫ —Ö–æ—á–µ—à —Ç–∏–ø—ñ–∑—É–≤–∞—Ç–∏

my_type= str| int | bool

def func()-> my_type: # –∑–∞ —Ç–∏–ø–æ–º –º–æ–∂–µ –≤–∏—Å—Ç—É–ø–∞—Ç–∏ —ñ–º—è –∫–ª–∞—Å—É —ñ —Ç—É—Ç –º–∏ –ø–∏—à–µ–º–æ —ó—ó —Å–∫—ñ–ª—Ç–∫–º —Ö–æ—á–µ–º–æ —â–æ–± —ó—ó –Ω–µ —Ä–æ–∑—â–∏—Ä—é–≤–∞—Ç–∏ –º–∏ –≤–∏–Ω–æ—Å–∏–º–æ –≤ –æ–∫—Ä–µ–º–∏–π —Ç–∏–ø
    return 1111
    # return 'bjhhj'
    # return [] –Ω–µ –¥–∞—î

def func1()->None: # —è–∫—â–æ —Ñ-—è –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω—ñ—á–æ–≥–æ
    return
################################# ##################################################
# TypedDict
# —Ç–∞–∫ —Ç–∏–ø—ñ–∑—É—î–º–æ
User=TypedDict('User',{"name":str,"age":int, "house":int})

users:list[User]=[
    {'name': 'Max', 'age': 1,'house':67},
    {'name': 'Nata', 'age': 35,'house':67},
]

# –Ø–∫ —Ç–∏–ø—ñ–∑–∞—Ü—ñ—è —Ñ-—ó (a:str,b:int) —Ü–µ —Ç–∏–ø—ñ–∑–∞—Ü—ñ—è (Callable)=–Ω–∞ –∑–∞–º–∏–∫–∞–Ω—è –ø—Ä–æ —Ç–∏–ø—ñ–∑–æ–≤–∞–Ω–∞
def counter(a:str,b:int)->Callable[[bool,list[str]],int]:  # —Ñ-—è –ø–æ–≤–µ—Ä—Ç–∞—î —Ñ-—ñ—é?[[bool,list[str]],int]=—â–æ –ø–∏–π–º–∞—î, (,int)= —â–æ –ø–æ–≤—Ä—Ç–∞—î=
                                                        # —Ü–µ —î –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–æ—Ç–∏–ø—ñ–∑–æ–≤–∞–Ω–∞ —Ñ-—è
    count=0

    def inner(f:bool,y:list[str])->int: #
        nonlocal count #   –¥–∏–≤–∏—Ç—å—Å—è –Ω–∞  count=0
        count+=1    # –∑–±—ñ–ª—å—à—É—î –Ω–∞ 1
        return count  #
    return inner # –ø–æ–≤–µ—Ä—Ç–∞—î —Å–∞–º—É —Ñ-—é


# ## üîπ **–©–æ —Ç–∞–∫–µ `typing` —É Python?**
#
# # –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ **`typing`** —É Python –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è **—Å—Ç–∞—Ç–∏—á–Ω–æ—ó —Ç–∏–ø—ñ–∑–∞—Ü—ñ—ó**
# # (Type Hinting). –í–æ–Ω–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –≤–∫–∞–∑–∞—Ç–∏ **—Ç–∏–ø–∏ –∑–º—ñ–Ω–Ω–∏—Ö, –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ–π —ñ –∑–Ω–∞—á–µ–Ω—å,
# # —â–æ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è**.
#
# # üìå **–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏:**
# # from typing import List, Dict, Tuple, Union, Optional
#
# ## üîπ **–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ `typing`**
# ### **1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–µ –∑–∞–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤**
# def greet(name: str) -> str:
#     return f"–ü—Ä–∏–≤—ñ—Ç, {name}!"
# print(greet("–ê–Ω—è"))  # –ü—Ä–∏–≤—ñ—Ç, –ê–Ω—è!
# üîπ `name: str` ‚Äì –∞—Ä–≥—É–º–µ–Ω—Ç –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º
# üîπ `-> str` ‚Äì —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫
# ### **2Ô∏è‚É£ –°–ø–∏—Å–∫–∏ (`List`)**
# # üìå **–°–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª (`List[int]`):**
# from typing import List
#
# def sum_numbers(numbers: List[int]) -> int:
#     return sum(numbers)
#
# print(sum_numbers([1, 2, 3, 4]))  # 10
# # üìå **–°–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ (`List[str]`):**
# def join_words(words: List[str]) -> str:
#     return " ".join(words)
#
# print(join_words(["Hello", "world"]))  # Hello world
# ### **3Ô∏è‚É£ –°–ª–æ–≤–Ω–∏–∫–∏ (`Dict`)**
# # üìå **–°–ª–æ–≤–Ω–∏–∫ —ñ–∑ –∫–ª—é—á–∞–º–∏ `str` —ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ `int`:**
# from typing import Dict
#
# students: Dict[str, int] = {"–ê–Ω—è": 10, "–û–ª–µ–≥": 9}
# ### **4Ô∏è‚É£ –ö–æ—Ä—Ç–µ–∂—ñ (`Tuple`)**
# # üìå **–ö–æ—Ä—Ç–µ–∂ —ñ–∑ –¥–≤–æ—Ö —á–∏—Å–µ–ª (`Tuple[int, int]`):**
# from typing import Tuple
#
# def get_coordinates() -> Tuple[int, int]:
#     return (10, 20)
#
# print(get_coordinates())  # (10, 20)
# ### **5Ô∏è‚É£ –ö—ñ–ª—å–∫–∞ –º–æ–∂–ª–∏–≤–∏—Ö —Ç–∏–ø—ñ–≤ (`Union`)**
# # –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –ø—Ä–∏–π–º–∞—Ç–∏ **—Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏** –¥–∞–Ω–∏—Ö:
# from typing import Union
#
# def convert_to_str(value: Union[int, float]) -> str:
#     return str(value)
#
# print(convert_to_str(10))  # "10"
# print(convert_to_str(5.5))  # "5.5"
# ### **6Ô∏è‚É£ –ù–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (`Optional`)**
# # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç –º–æ–∂–µ –±—É—Ç–∏ `None`:
# from typing import Optional
#
# def get_name(name: Optional[str] = None) -> str:
#     if name:
#         return f"–ü—Ä–∏–≤—ñ—Ç, {name}!"
#     return "–ü—Ä–∏–≤—ñ—Ç, –≥—ñ—Å—Ç—å!"
#
# print(get_name())       # –ü—Ä–∏–≤—ñ—Ç, –≥—ñ—Å—Ç—å!
# print(get_name("–ê–Ω—è"))  # –ü—Ä–∏–≤—ñ—Ç, –ê–Ω—è!
# # **üìå –í–∏—Å–Ω–æ–≤–æ–∫**
# ‚úÖ `typing` **–Ω–µ –∑–º—ñ–Ω—é—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É –∫–æ–¥—É, –∞ –ª–∏—à–µ –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º —ñ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞–º –∫–æ–¥—É**.
# ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ **–∞–Ω–æ—Ç–∞—Ü—ñ—è—Ö —Ç–∏–ø—ñ–≤** (`List`, `Dict`, `Tuple`, `Union`, `Optional`).
# ‚úÖ –ü–æ–ª–µ–≥—à—É—î **—á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å –∫–æ–¥—É** —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—î —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫. üöÄ