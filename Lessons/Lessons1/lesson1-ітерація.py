# üîÑ **–Ø–∫ —ñ—Ç–µ—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä—Ç–µ–∂ (`tuple`) —ñ —Å–ª–æ–≤–Ω–∏–∫ (`dict`) —É Python?**

# –£ Python –º–æ–∂–Ω–∞ –ª–µ–≥–∫–æ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ **–∫–æ—Ä—Ç–µ–∂—ñ–≤ (`tuple`)** —ñ **—Å–ª–æ–≤–Ω–∏–∫—ñ–≤ (`dict`)** –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é **—Ü–∏–∫–ª—É `for`**.

## **‚úÖ –í–∏—Å–Ω–æ–≤–∫–∏**
# - **–ö–æ—Ä—Ç–µ–∂ (`tuple`)** —ñ—Ç–µ—Ä—É—î—Ç—å—Å—è —Ç–∞–∫ —Å–∞–º–æ, —è–∫ —ñ —Å–ø–∏—Å–æ–∫.
# - **–°–ª–æ–≤–Ω–∏–∫ (`dict`)** –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç–∏:
#   - **–∑–∞ –∫–ª—é—á–∞–º–∏** ‚Üí `for key in dict`
#   - **–∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏** ‚Üí `for value in dict.values()`
#   - **–∑–∞ –ø–∞—Ä–∞–º–∏ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è** ‚Üí `for key, value in dict.items()`
# - `enumerate()` –¥–∞—î **—ñ–Ω–¥–µ–∫—Å–∏** –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–±–æ—Ä—É.
## **üîπ 1Ô∏è‚É£ –Ü—Ç–µ—Ä–∞—Ü—ñ—è –∫–æ—Ä—Ç–µ–∂–∞ (`tuple`)**
# –ö–æ—Ä—Ç–µ–∂ (`tuple`) ‚Äî —Ü–µ **–Ω–µ –∑–º—ñ–Ω—é–≤–∞–Ω–∏–π** –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö —É Python.

### üìå **–ü—Ä–∏–∫–ª–∞–¥: –ø—Ä–æ—Å—Ç–∏–π –ø–µ—Ä–µ–±—ñ—Ä –∫–æ—Ä—Ç–µ–∂–∞**
numbers = (10, 20, 30, 40, 50)

for num in numbers:
    print(num) #**–í–∏–≤–µ–¥–µ:** #10, 20, 30, 40, 50
# ‚úÖ –ö–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞ –ø–µ—Ä–µ–±–∏—Ä–∞—î—Ç—å—Å—è **–ø–æ —á–µ—Ä–∑—ñ**.


### üìå **–ü–µ—Ä–µ–±—ñ—Ä –∫–æ—Ä—Ç–µ–∂–∞ –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ (`enumerate`)**–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ **–æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å** –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞:
words = ("Python", "Java", "C++")

for index, word in enumerate(words):
    print(f"Index {index}: {word}")
# üîπ **–í–∏–≤–µ–¥–µ:**
# Index 0: Python
# Index 1: Java
# Index 2: C++
# ‚úÖ `enumerate()` –ø–æ–≤–µ—Ä—Ç–∞—î **(—ñ–Ω–¥–µ–∫—Å, –∑–Ω–∞—á–µ–Ω–Ω—è)**.

## **üîπ 2Ô∏è‚É£ –Ü—Ç–µ—Ä–∞—Ü—ñ—è —Å–ª–æ–≤–Ω–∏–∫–∞ (`dict`)**
# –°–ª–æ–≤–Ω–∏–∫ (`dict`) –∑–±–µ—Ä—ñ–≥–∞—î **–ø–∞—Ä–∏ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è**.

### üìå **–ü–µ—Ä–µ–±—ñ—Ä —Ç—ñ–ª—å–∫–∏ –∫–ª—é—á—ñ–≤ (`keys()`)**
person = {"name": "Alice", "age": 25, "city": "New York"}

for key in person:
    print(key)
# üîπ **–í–∏–≤–µ–¥–µ:**
# name
# age
# city
# ‚úÖ **–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º `for` –ø–µ—Ä–µ–±–∏—Ä–∞—î –∫–ª—é—á—ñ —Å–ª–æ–≤–Ω–∏–∫–∞**.

### üìå **–ü–µ—Ä–µ–±—ñ—Ä –∫–ª—é—á—ñ–≤ (`keys()`) —è–≤–Ω–æ**
for key in person.keys():
    print(key)
# üîπ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–∏–π —Å–∞–º–∏–π, —è–∫ —ñ –±–µ–∑ `keys()`.


### üìå **–ü–µ—Ä–µ–±—ñ—Ä –∑–Ω–∞—á–µ–Ω—å (`values()`)**–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ **—Ç—ñ–ª—å–∫–∏ –∑–Ω–∞—á–µ–Ω–Ω—è**, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `values()`:
for value in person.values():
    print(value)
# üîπ **–í–∏–≤–µ–¥–µ:**
# Alice
# 25
# New York

### üìå **–ü–µ—Ä–µ–±—ñ—Ä –ø–∞—Ä (–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è) —á–µ—Ä–µ–∑ `items()`**
# –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç–∏ **—ñ –∫–ª—é—á, —ñ –∑–Ω–∞—á–µ–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ**:
for key, value in person.items():
    print(f"{key}: {value}")
# üîπ **–í–∏–≤–µ–¥–µ:**
# name: Alice
# age: 25
# city: New York
# ‚úÖ `items()` –ø–æ–≤–µ—Ä—Ç–∞—î **–∫–æ—Ä—Ç–µ–∂ `(–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–Ω—è)`**.

## **üõ† –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —É —Ä–µ–∞–ª—å–Ω–∏—Ö –∑–∞–¥–∞—á–∞—Ö**
### üîπ **1Ô∏è‚É£ –ü–µ—Ä–µ–±—ñ—Ä —Å–ª–æ–≤–Ω–∏–∫–∞ –∑ –∫–æ—Ä—Ç–µ–∂–∞–º–∏**
students = {
    "Alice": (25, "Math"),
    "Bob": (22, "Physics"),
    "Charlie": (23, "Biology")
}
for name, (age, subject) in students.items():
    print(f"{name} is {age} years old and studies {subject}.")
# üîπ **–í–∏–≤–µ–¥–µ:**
# Alice is 25 years old and studies Math.
# Bob is 22 years old and studies Physics.
# Charlie is 23 years old and studies Biology.

### üîπ **2Ô∏è‚É£ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ —É —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤**
person_list = list(person.items())
print(person_list)
# üîπ **–í–∏–≤–µ–¥–µ:**
# [('name', 'Alice'), ('age', 25), ('city', 'New York')]
# ‚úÖ `items()` –¥–æ–∑–≤–æ–ª—è—î **–∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫ —É —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤**.

