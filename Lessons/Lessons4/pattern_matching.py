#–£ Python pattern matching (—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–µ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∑ —à–∞–±–ª–æ–Ω–æ–º) ‚Äî —Ü–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –æ–±'—î–∫—Ç–∞
# —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –π–æ–≥–æ —á–∞—Å—Ç–∏–Ω. –¶–µ –¥—É–∂–µ –ø–æ—Ç—É–∂–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è,  —è–∫–∞ –¥–æ–∑–≤–æ–ª—è—î, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥,
# –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö (—Å–ª–æ–≤–Ω–∏–∫–∏, —Å–ø–∏—Å–∫–∏, –æ–±'—î–∫—Ç–∏) –±–µ–∑ –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ if/elif
#‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å
# # match –≤–∏—Ä–∞–∑:
#     case —à–∞–±–ª–æ–Ω1:
#         # –¥—ñ—ó
#     case —à–∞–±–ª–æ–Ω2:
#         # –¥—ñ—ó
#     case _:
#         # —ñ–Ω—à–µ (—è–∫ else)
# üìå –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
# case _: ‚Äî –∞–Ω–∞–ª–æ–≥ else, —Å–ø—Ä–∞—Ü—å–æ–≤—É—î, —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å.
# –ú–æ–∂–Ω–∞ –≤–∏—Ç—è–≥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ä–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è.
# –ü—Ä–∞—Ü—é—î –∑ –±—É–¥—å-—è–∫–∏–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏: —Å–ø–∏—Å–∫–∞–º–∏, –∫–æ—Ä—Ç–µ–∂–∞–º–∏, —Å–ª–æ–≤–Ω–∏–∫–∞–º–∏, –æ–±'—î–∫—Ç–∞–º–∏ –∫–ª–∞—Å—ñ–≤.
#
# üîß –ù–∞–≤—ñ—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω pattern matching?
# –ó–∞–º—ñ–Ω–∞ if...elif...else –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
# –ö—Ä–∞—â–µ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–¥—É –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö
# –û—Å–æ–±–ª–∏–≤–æ –∑—Ä—É—á–Ω–æ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ JSON, API-–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, –ø–∞—Ä—Å–∏–Ω–≥—É —Å—Ç—Ä—É–∫—Ç—É—Ä

'''any= input('enter any: ')
match any:# –î–∏–≤–∏—Ç—å—Å—è –∑–∞
    case'hi': # —è–∫—â–æ
        print('hello')
    case 'no':
        print('nope')
    case _: # –∫–µ–π—Å –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
        print('default')'''

# –ª—é–¥–∏–Ω–∞ –ø–æ–≤–∏–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞ –ª—ñ–≤–æ —ñ –∑—Ä–æ–±–∏—Ç–∏ 200 –∫—Ä–æ–∫—ñ–≤

# a=['left','200']
# # –≤–º—ñ—î –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º —Ä–µ–∂–∏–º—ñ —Ä–æ–∑–¥—ñ–ª—è—Ç–∏ –Ω–∞–≤—ñ—Ç—å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑—É–≤–∞—Ç–∏ —ñ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —â–æ —Ç–∞–º —î
# match a:
#     case 'left', value: # —è–∫—â–æ –ª—ñ–≤–æ —Ç–æ –≤–µ–ª—é #
#         print('left', value) # left 200
#     case 'right', value:
#         print('right', value)

'''match-–º–æ–∂–µ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ —ó—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏'''
a=['left','200']
# a=['left','200', '23435'] # –º–∞—î —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–Ω—è
# match a:
#     case 'left' as k, value: # —è–∫—â–æ –ª—ñ–≤–æ —Ç–æ –≤–µ–ª—é # left1 left 200
#         print('left1', k,value) # left 200
#     case 'right', value:
#         print('right', value)
#     case f,s,t:
#         print('three',f,s,t) # –¥–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å three left 200 23435

# –º–æ–∂–Ω–∞ –ø—Ä–æ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ç—É—Ç –º–∞—î –±—É—Ç–∏ 200
'''match a:
    case 'left' as k,'200' as value: #left1 left 200
        print('left1', k,value) #
    case 'right', value:
        print('right', value)
    case f,s,t:
        print('three',f,s,t)
    case _:
        print('haha')'''
# –ë–µ—Ä–µ–º–æ —ñ–∑ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –¥—ñ–∫—à–µ—Ä—ñ —ñ –∫–ª–∞—Å —é–∑–µ—Ä—ñ–≤

user_dict={'name':'Max', 'age': 15}

class User:
    __match_args__ = {'name','age'} # –∫–ª–∞—Å –Ω–µ –ø—Ä–∞—Ü—é—î –∑ –º–∞—á—Ç–æ–º —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ –∫–æ–ª–∏ —î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π  –ø—Ä–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ –ø–æ—Ç—ñ–º –≤–ø–∏—Å—É—î–º–æ –ø–æ–ª—è –∑ —è–∫–∏–º–∏ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
    def __init__(self,name,age):
        self.name=name
        self.age=age
user_class=User('Karina',20)

# —Å—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ç–µ –∞–±–æ —Ç–µ —ñ –≤–∏–≤–æ–¥–∏—Ç—å —ñ–º'—è —ñ —Ä–æ–∫–∏(source= —Ü–µ –¥–∞–Ω—ñ –ø—Ä–∏–π–º–∞—î)

# def matcher(source:User | dict): # –ø—Ä–æ–≤—ñ—Ä—è—î
#     if isinstance(source,dict):  # —è–∫—â–æ
#         print(source['name'],source['age'])
#     elif isinstance(source,User): # —ñ–Ω–∞–∫—à–µ
#         print(source.name,source.age)
#
# matcher(user_dict)
# matcher(user_class)
# –º–∏ –º–æ–∂–µ–º–æ —É–¥–æ—Å–∫–æ–Ω–∞–ª–∏—Ç–∏ —Ü–µ —â–æ–± –Ω–µ –ø—Ä–æ–≤—ñ—Ä—è—Ç–∏ —Ü–µ —Ç–∞–∫

def matcher(source:User|dict):
    match source:
        case User(name,age):
            print(name,age)
        case {'name':'Max' as name,'age': age}: # dict —è–∫—â–æ —ñ–º—è
            print(name,age)

matcher(user_dict)
